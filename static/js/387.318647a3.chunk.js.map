{"version":3,"file":"static/js/387.318647a3.chunk.js","mappings":"yPAEaA,EAAQC,EAAAA,GAAAA,IAAH,oFAKLC,EAAaD,EAAAA,GAAAA,GAAH,2IAUVE,EAAYF,EAAAA,GAAAA,GAAH,+IAYTG,EAAOH,EAAAA,GAAAA,IAAH,2CAKJI,EAAOJ,EAAAA,GAAAA,GAAH,+DAKJK,EAAYL,EAAAA,GAAAA,KAAH,8C,SCetB,EA5Ca,WACT,OAA4BM,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAE,EAAAA,EAAAA,YAAU,YAEEC,EAAAA,EAAAA,IAAYH,GAASI,MAAK,SAAAC,GACtBN,EAAUM,EAAKC,KAAKC,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC3C,MAAO,CACHC,OAAQH,EAAY,0CACqBA,GAbnE,+EAe0BC,KAAMA,EACNC,UAAWA,EAElB,IACJ,IACJE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GAEP,GAAC,CAACb,KAGX,SAACR,EAAD,UACKM,EAAOS,KAAI,YAAkC,IAA/BE,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OAC5B,OACI,UAAClB,EAAD,YACI,SAACH,EAAD,CAAO0B,IAAKL,EAAQM,IAAKR,EAAMS,MAAM,MAAMC,OAAO,SAClD,UAACzB,EAAD,YACI,SAACC,EAAD,UAAOc,KACP,UAACb,EAAD,wBAAsBc,UAJdD,EAQvB,KAKZ,C,uJChDD,IACMW,EAAU,mCAGHC,EAAmB,WAC5B,IAAMC,EAAO,UALA,gCAKA,sCAA4CF,GACzD,OAAOG,MAAMD,GAASlB,MAAK,SAAAoB,GAAQ,OAAIA,EAASC,MAAb,GAEtC,EAEYC,EAAiB,SAAA1B,GAC1B,IAAM2B,EAAQ,6CAAyC3B,EAAzC,oBAA4DoB,EAA5D,mBAEd,OAAOG,MAAMI,GACRvB,MAAK,SAAAoB,GAAQ,OAAIA,EAASC,MAAb,GACrB,EAEYtB,EAAc,SAAAH,GACvB,IAAM4B,EAAO,6CAAyC5B,EAAzC,4BAAoEoB,EAApE,mBACb,OAAQG,MAAMK,GAASxB,MAAK,SAAAoB,GAAQ,OAAIA,EAASC,MAAb,GACvC,EAEYI,EAAe,SAAA7B,GACxB,IAAM8B,EAAU,6CAAyC9B,EAAzC,4BAAoEoB,EAApE,0BAChB,OAAOG,MAAMO,GACV1B,MAAK,SAAAoB,GAAQ,OAAIA,EAASC,MAAb,GACnB,EAEYM,EAAW,SAAAC,GACpB,IAAMC,EAAO,4DAAwDb,EAAxD,iCAAwFY,EAAxF,+BACb,OAAQT,MAAMU,GAAS7B,MAAK,SAAAoB,GAAQ,OAAIA,EAASC,MAAb,GACvC,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/GetFilms.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Image = styled.img`\nwidth:100%;\nmargin-bottom: 14px;\nborder: 2px solid #fff;\n`;\nexport const ActorsList = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\ngap: 30px;\nalign-items: center;\njustify-content: center;\nlist-style: none;\n\n`;\n\nexport const ActorCard = styled.li`\nflex-basis: calc(12% - 30px);\n  :not(:last-child) {\n    margin-bottom: 30px;\n  }\n  \n  p {\n    margin: 0;\n  }\n\n`;\n\nexport const Info = styled.div`\n  flex-grow: 1;\n\n`;\n\nexport const Name = styled.h2`\nfont-size: 16px;\nmargin-bottom: 8px;\n`\n\nexport const Character = styled.span`\n  font-weight: bold;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchActors } from 'services/GetFilms';\nimport { ActorsList, Image, ActorCard, Info, Name, Character } from './Cast.styled';\nimport PropTypes from 'prop-types';\n;\nconst placeHolder =\n  'https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png';\n\n\nconst Cast = () => {\n    const [actors, setActors] = useState([]);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        function getActors() {\n                fetchActors(movieId).then(data => {\n                    setActors(data.cast.map(({ profile_path, name, character }) => {\n                        return {\n                            poster: profile_path\n                                ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                                : placeHolder,\n                            name: name,\n                            character: character,\n                        };\n                    }));\n                })\n            .catch(error => console.log(error));\n        }\n    getActors();},[movieId]);\n\n    return (\n        <ActorsList>\n            {actors.map(({ name, character, poster }) => {\n                return (\n                    <ActorCard key={name}>\n                        <Image src={poster} alt={name} widtn=\"150\" height=\"200\" />\n                        <Info>\n                            <Name>{name}</Name>\n                            <Character>Character:{character}</Character>\n                        </Info>\n                    </ActorCard>\n                );\n            }\n           \n            )}\n        </ActorsList>);\n    \n};\n\nCast.propTypes = {\n    actors: PropTypes.string,\n};\n\nexport default Cast;","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '07365d3730901c9189566ffe38d9d5bb';\n\n\nexport const getTrendingFilms = () => {\n    const urlHome = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n    return fetch(urlHome).then(response => response.json());\n        \n};\n\nexport const getDescription = movieId => {\n    const urlMovie = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n\n    return fetch(urlMovie)\n        .then(response => response.json());\n};\n\nexport const fetchActors = movieId => {\n    const urlCast = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n    return  fetch(urlCast).then(response => response.json());\n};\n\nexport const fetchReviews = movieId => {\n    const urlReviews = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n    return fetch(urlReviews)\n      .then(response => response.json());\n};\n\nexport const findFilm = query => {\n    const urlFilm = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\n    return  fetch(urlFilm).then(response => response.json());\n};"],"names":["Image","styled","ActorsList","ActorCard","Info","Name","Character","useState","actors","setActors","movieId","useParams","useEffect","fetchActors","then","data","cast","map","profile_path","name","character","poster","catch","error","console","log","src","alt","widtn","height","API_KEY","getTrendingFilms","urlHome","fetch","response","json","getDescription","urlMovie","urlCast","fetchReviews","urlReviews","findFilm","query","urlFilm"],"sourceRoot":""}