{"version":3,"file":"static/js/779.1b649efa.chunk.js","mappings":"yQAEaA,EAAOC,EAAAA,GAAAA,GAAH,0BAIJC,EAAaD,EAAAA,GAAAA,GAAH,0BAIVE,EAASF,EAAAA,GAAAA,GAAH,yCAING,EAAUH,EAAAA,GAAAA,EAAH,yC,SCNPI,EAAU,WACnB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBV,OApBEE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAU,UARP,gCAQO,iBAAuBH,EAAvB,4BAPR,mCAOQ,mBAGpBI,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAG,GACJT,EACES,EAAKC,QAAQC,KAAI,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,QAAnB,MAAkC,CACjDC,OAAQF,EAAeG,SACvBF,QAASA,EAFM,IAKlB,IACAG,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GAIf,GAAE,CAAChB,KAGJ,8BACGF,EAAQqB,OAAS,GAChB,UAAC5B,EAAD,WACGO,EAAQY,KAAI,WAAsBU,GAAW,IAA9BP,EAA6B,EAA7BA,OAAQD,EAAqB,EAArBA,QACtB,OACE,UAACnB,EAAD,YACE,UAACC,EAAD,sBAAiBmB,MACjB,SAAClB,EAAD,UAAUiB,MAFKQ,EAKpB,IARH,QAWG,iEAGV,EAaD,G","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n\n`;\n\nexport const ReviewItem = styled.li`\n\n`;\n\nexport const Author = styled.h3`\nfont-size:16px;\n`;\n\nexport const Content = styled.p`\nfont-size:12px;\n`;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Author, Content, ReviewItem, List } from './Reviews.styled';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '07365d3730901c9189566ffe38d9d5bb';\n\nexport const Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const urlReviews = `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n\n    function getReviews()  {\n    fetch(urlReviews)\n      .then(response => response.json())\n      .then(data => {\n        setReviews(\n          data.results.map(({ author_details, content }) => ({\n            author: author_details.username,\n            content: content,\n          }))\n        );\n        })\n        .catch(error => console.log(error));\n    }\n      getReviews();\n      \n    }, [movieId]);\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <List>\n          {reviews.map(({ author, content }, index) => {\n            return (\n              <ReviewItem key={index}>\n                <Author>Author: {author}</Author>\n                <Content>{content}</Content>\n              </ReviewItem>\n            );\n          })};\n\n        </List>\n      ) : (<p>We don't have reviews for this movie</p>) }\n    </>\n    );\n};\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n\n\nexport default Reviews;"],"names":["List","styled","ReviewItem","Author","Content","Reviews","useState","reviews","setReviews","movieId","useParams","useEffect","urlReviews","fetch","then","response","json","data","results","map","author_details","content","author","username","catch","error","console","log","length","index"],"sourceRoot":""}